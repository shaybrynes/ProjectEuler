"""
---*** THE PROBLEM ***---
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184385861560789112949495
459501737958331952853208805511125406987471585238630507156932909632952274430435576689664895044524452316173185640309871112
172238311362229893423380308135336276614282806444486645238749303589072962904915604407723907138105158593079608667017242712
188399879790879227492190169972088809377665727333001053367881220235421809751254540594752243525849077116705560136048395864
467063244157221553975369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535100474
821663704844031998900088952434506585412275886668811642717147992444292823086346567481391912316282458617866458359124566529
476545682848912883142607690042242190226710556263211111093705442175069416589604080719840385096245544436298123098787992724
428490918884580156166097919133875499200524063689912560717606058861164671094050775410022569831552000559357297257163626956
1882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product.
What is the value of this product?

---*** SOLUTION NOTES ***---
Manipulating the string into segments will make mathematics easier
"""


def splitter(number, iterator , str_length):
    # 'number' is the string to be split, 'iterator' is the starting position of the splice
    # 'str_length' is the number of characters to split the number into.
    # Returns the string of length 'str_length'.

    # Try to get the next str_length digits.
    try:
        digits = number[iterator:(iterator + str_length)]

    # If not possible then catch IndexError, and set digits to False.
    except IndexError:
        digits = False

    return digits


def multiplier(number, str_length):
    # 'number' is the string to be split, 'str_length' is the number of characters to split the number into.
    # Returns a list of all the products.

    solutions = []

    # Iterate of the length of the number
    for i in range(0, len(number)):

        # Get the next set of digits to multiply together.
        digits = splitter(number, i, str_length)
        multi = 1

        # If an exception was not thrown (i.e there is 13 digits)
        if digits:

            # Iterate ove the digits collected by the splitter
            for j in range(0, len(digits)):

                # Multiply the digits together
                multi *= int(digits[j])

            # Append the solution to a list of all solutions
            solutions.append(multi)

    return solutions


# Set program up for the initial conditions specified by the problem.
number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615" \
         "6078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557668966489504" \
         "4524452316173185640309871112172238311362229893423380308135336276614282806444486645238749303589072962904915" \
         "6044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202" \
         "3542180975125454059475224352584907711670556013604839586446706324415722155397536978179778461740649551492908" \
         "6256932197846862248283972241375657056057490261407972968652414535100474821663704844031998900088952434506585" \
         "4122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426" \
         "0769004224219022671055626321111109370544217506941658960408071984038509624554443629812309878799272442849091" \
         "8884580156166097919133875499200524063689912560717606058861164671094050775410022569831552000559357297257163" \
         "6269561882670428252483600823257530420752963450"
str_length = 13

# Generate all the solutions possible.
solutions = multiplier(number, str_length)

# Print the largest value.
print(max(solutions))
