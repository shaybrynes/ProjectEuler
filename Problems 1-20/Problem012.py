"""
---*** THE PROBLEM ***---
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

---*** SOLUTION NOTES ***---
Since the number of factors is needed, not their actual value, we can increase the speed of the program by realising
that every factor below the square root of the number has a paired value. If the number has a perfect square root that
factor only appears once.
"""

from math import ceil


def number_of_factors(triangle_num):
    # 'triangle_num' is the triangle number to have its number of factors calculated.
    # Returns the number of factors that the triangle number has.

    number_factors = 0

    # Iterate over the every number between 1 and the square root of the triangle number.
    for i in range(1, ceil(triangle_num**0.5)):

        # If the iterator goes perfectly into the 'triangle_num' it must be a factors.
        if triangle_num % i == 0:

            # If the factor is a perfect square root. (One Factors)
            if triangle_num/i == i:
                number_factors += 1

            # Otherwise the root has a factor pair. (Two Factors)
            else:
                number_factors += 2

    return number_factors


def triangle_factors(min_factors):
    # 'min_factors' is the minimum number of factors that the triangle number must have.
    # Returns the first triangle number with at least 'min_factors' factors.

    # 'triangle_num' is the first triangle number
    triangle_num = 1
    # 'next_num' is the iterative part to increase the triangle number
    next_num = 2

    # Continue searching until the first result is found.
    while True:

        # Set up the next triangle number to be tested.
        triangle_num += next_num
        next_num += 1

        # Find the number of factors associated sith the triangle number.
        number_factors = number_of_factors(triangle_num)

        # If the minimum number of factors has been exceeded break the iteration.
        if number_factors > min_factors:
            break

    return triangle_num


# Set program up for the initial conditions specified by the problem.
min_factors = 500

# Find the triangle number that meets this condition first
solution = triangle_factors(500)

# Print the solution
print(solution)
